import java.io.*;
import java.util.StringTokenizer;
import java.util.Queue;
import java.util.LinkedList;

public class main {
	static int N, M;	//N:세로, M:가로
	static int[][] arr;
	static Queue<Integer> queuex = new LinkedList<>();
	static Queue<Integer> queuey = new LinkedList<>();
	static int[] dx = {0,0,-1,1};
	static int[] dy = {-1,1,0,0};
	
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		
		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());
		
		arr = new int[N+1][M+1];
		
		for (int i=0; i<N; i++) {
			st = new StringTokenizer(br.readLine());
			for (int j=0; j<M; j++) {
				arr[i][j] = Integer.parseInt(st.nextToken());
				
				//익은토마토 -> queue에 저장
				if (arr[i][j] == 1) {
					queuex.add(i);
					queuey.add(j);
				}
			}
		}
		bfs();
		
	}
  
	//bfs
	public static void bfs() {
		int x, y;
		int ans = 0;
		
		while(!queuex.isEmpty() && !queuey.isEmpty()) {
			x = queuex.poll();
			y = queuey.poll();
			for (int i=0; i<4; i++) {
				int newx = x + dx[i];
				int newy = y + dy[i];
				
				if (newx<0 || newx>=N || newy<0 || newy>=M) continue; //**부등호 주의!
				//안익은 토마토 발견
				if (arr[newx][newy] == 0) {
					queuex.add(newx);
					queuey.add(newy);
					arr[newx][newy] = arr[x][y] + 1;	//안익은 토마토 익음 --> 0을 1로
					ans = arr[newx][newy];
				}
			}
		}
		
		//while문 종료 후 탐색 --> 안익은 토마토 존재할경우 -1 출력
		for (int i=0; i<N; i++) {
			for (int j=0; j<M; j++) {
				if (arr[i][j] == 0) {
					System.out.println(-1);
					return;
				}
			}
		}
		if (ans > 0) {
			System.out.println(ans-1);
		}
	}
}
